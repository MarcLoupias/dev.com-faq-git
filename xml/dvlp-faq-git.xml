<?xml version="1.0" encoding="UTF-8"?>
<document>
    <!-- en-tete de la FAQ -->
    <editeur>
        <edversion>Version 2.45</edversion>
        <edtypexml>0</edtypexml>
    </editeur>
    <entete>
        <rubrique>42</rubrique>
        <meta>
            <description>FAQ Git</description>
            <keywords>faq, SCM, Git</keywords>
        </meta>
        <titre>
            <page>FAQ Git</page>
            <article>FAQ Git</article>
        </titre>
        <date>2018-12-01</date>
        <miseajour>2018-12-01</miseajour>
        <licauteur>Developpez</licauteur>
        <lictype>4</lictype>
        <licannee>2018</licannee>
        <serveur>marco46-http</serveur>
        <chemin>faq/git/</chemin>
        <urlhttp>https://alm.developpez.com/faq/git/</urlhttp>
        <nopdf/>
        <nozip/>
        <nodownload/>
        <noebook/>
        <nomfaq>FAQGIT</nomfaq>
    </entete>
    <!-- description des auteurs -->
    <authorDescriptions><authorDescription name="marco46" role="auteur"><fullname>Marc Loupias</fullname><url>https://www.developpez.net/forums/u70899/marco46/</url></authorDescription><authorDescription name="littlewhite" role="correcteur"><fullname>Little White</fullname><url>https://www.developpez.net/forums/u240267/littlewhite/</url></authorDescription><authorDescription name="mickael-baron" role="correcteur"><fullname>Mickael Baron</fullname><url>https://www.developpez.net/forums/u69211/mickael-baron/</url></authorDescription><authorDescription name="songbird" role="correcteur"><fullname>Songbird</fullname><url>https://www.developpez.net/forums/u897329/songbird/</url></authorDescription></authorDescriptions>
    <!-- Edito de la FAQ, il faut la placer dans des balises paragraph -->
    <edito>
        <paragraph>FAQ Git en français pour developpez.com</paragraph>
    </edito>
    <!-- Sommaire de la FAQ -->
    <!-- licence de reproduction affiché en bas de l'article -->
    <licence>CC-BY-SA-4.0</licence>
    <summary><section id="generalites"><title>Généralités</title><link href="qu-est-ce-que-git"/><link href="que-signifie-git"/><link href="ou-trouver-de-la-documentation-pour-git"/><link href="ou-trouver-le-code-source-de-git"/><link href="quelles-sont-les-differences-entre-un-scm-centralise-comme-subversion-et-un-scm-decentralise-comme-git"/><link href="qu-est-ce-qu-un-depot-repository-git"/><link href="qu-est-ce-qu-depot-distant-remote"/><link href="que-designent-les-termes-upstream-et-downstream"/></section><section id="installation-et-configuration"><title>Installation et configuration</title><link href="comment-installer-git-sur-windows"/><link href="comment-installer-git-sur-macos"/><link href="comment-installer-git-sur-linux"/><link href="comment-connaitre-la-liste-des-commandes-git"/><link href="comment-connaitre-la-version-de-votre-git"/><link href="quels-sont-les-fichiers-de-configuration-de-git"/><link href="comment-afficher-la-configuration-courante-de-git"/><link href="comment-exclure-des-fichiers"/><link href="comment-changer-son-nom-d-utilisateur"/><link href="comment-changer-son-email"/><link href="comment-changer-l-url-d-un-depot-distant"/></section><section id="initialisation-d-un-depot"><title>Initialisation d’un dépôt</title><link href="comment-initialiser-un-depot"/><link href="comment-initialiser-un-depot-nu-bare-repository"/><link href="comment-cloner-un-depot"/><link href="comment-connaitre-l-etat-du-depot"/></section><section id="les-depots-distants-remotes"><title>Les dépôts distants (<i>remotes</i>)</title><link href="comment-lister-les-depots-distants-d-un-depot"/><link href="comment-ajouter-un-depot-distant"/><link href="comment-inspecter-un-depot-distant"/><link href="comment-supprimer-un-depot-distant"/><link href="comment-renommer-un-depot-distant"/><link href="comment-mettre-a-jour-la-representation-locale-d-un-depot-distant-fetch"/><link href="comment-mettre-a-jour-une-branche-locale-avec-une-branche-distante-pull"/><link href="comment-mettre-a-jour-un-depot-distant-push"/></section><section id="le-repertoire-de-travail-working-directory"><title>Le répertoire de travail (<i>working directory</i>)</title><link href="qu-est-ce-que-le-repertoire-de-travail-working-directory"/><link href="comment-changer-l-etat-du-repertoire-de-travail-working-directory"/><link href="comment-connaitre-l-etat-du-repertoire-de-travail-working-directory-selon-git"/><link href="comment-annuler-les-modifications-effectuees-sur-un-fichier-du-repertoire-de-travail"/><link href="que-veut-dire-detached-head-state-apres-avoir-effectue-un-git-checkout"/><link href="quel-est-l-interet-de-faire-un-checkout-sur-un-tag"/></section><section id="l-index-staging-area"><title>L’index (<i>staging area</i>)</title><link href="qu-est-ce-que-l-index"/><link href="comment-ajouter-un-fichier-a-l-index"/><link href="comment-retirer-un-fichier-de-l-index"/></section><section id="les-commits"><title>Les commits</title><link href="qu-est-ce-qu-un-commit"/><link href="comment-creer-un-commit"/><link href="comment-ajouter-un-message-en-creant-un-commit"/><link href="comment-modifier-le-message-d-un-commit-existant"/><link href="comment-supprimer-le-dernier-commit-de-la-branche-courante-sans-perdre-les-modifications"/><link href="comment-supprimer-le-dernier-commit-de-la-branche-courante-avec-les-modifications"/><link href="comment-supprimer-les-n-derniers-commits-de-la-branche-courante-sans-perdre-les-modifications"/><link href="comment-supprimer-les-n-derniers-commits-de-la-branche-courante-avec-les-modifications"/><link href="comment-ajouter-un-commit-d-une-branche-a-dans-une-branche-b-sans-effectuer-un-merge-cherry-pick"/><link href="comment-ajouter-un-commit-provenant-d-une-branche-d-un-autre-depot-a-la-branche-courante-de-ce-depot-cherry-pick"/><link href="comment-annuler-un-commit-existant-revert"/></section><section id="les-branches"><title>Les branches</title><link href="qu-est-ce-qu-une-branche"/><link href="comment-lister-les-branches-locales"/><link href="comment-lister-toutes-les-branches-locales-distantes-traquees-non-traquees"/><link href="comment-creer-une-branche"/><link href="comment-creer-une-branche-sur-une-depot-distant"/><link href="comment-supprimer-une-branche"/><link href="comment-supprimer-une-branche-distante"/><link href="comment-renommer-une-branche"/><link href="comment-comparer-deux-branches"/><link href="comment-comparer-deux-branches-pour-connaitre-les-historiques-des-commits"/><link href="comment-comparer-deux-branches-pour-connaitre-les-contenus-des-commits"/><link href="comment-comparer-les-historiques-de-deux-branches"/><link href="comment-comparer-l-etat-de-tous-les-fichiers-presents-dans-deux-branches"/><link href="comment-comparer-l-etat-d-un-fichier-present-dans-deux-branches"/></section><section id="les-fusions-de-branches-merge"><title>Les fusions de branches (<i>merge</i>)</title><link href="qu-est-ce-qu-une-fusion-merge"/><link href="comment-fusionner-une-branche-toto-dans-une-branche-master"/><link href="quelle-est-la-difference-entre-un-merge-fast-forward-et-un-merge-no-fast-forward"/><link href="comment-annuler-une-fusion-terminee"/><link href="qu-est-ce-qu-un-conflit"/><link href="comment-gerer-un-conflit"/><link href="comment-annuler-une-fusion-en-cours"/></section><section id="reecriture-de-l-historique-rebase"><title>Réécriture de l’historique (<i>rebase</i>)</title><link href="qu-est-ce-qu-un-rebase"/><link href="pourquoi-effectuer-un-rebase"/><link href="comment-effectuer-un-rebase"/><link href="qu-est-ce-qu-un-rebase-interactif"/><link href="pourquoi-effectuer-un-rebase-interactif"/><link href="comment-effectuer-un-rebase-interactif"/><link href="comment-annuler-un-rebase-en-cours"/><link href="comment-resoudre-un-conflit-lors-d-un-rebase"/></section><section id="les-tags"><title>Les tags</title><link href="qu-est-ce-qu-un-tag"/><link href="comment-creer-une-tag"/><link href="comment-supprimer-une-tag"/><link href="comment-renommer-une-tag"/><link href="comment-lister-les-tags-existants"/><link href="comment-comparer-deux-tags"/><link href="comment-comparer-l-etat-d-un-fichier-present-dans-deux-tags"/></section><section id="les-logs"><title>Les logs</title><link href="qu-est-ce-que-le-log"/><link href="comment-afficher-le-log"/><link href="comment-afficher-le-log-sous-forme-graphique-dans-la-console"/><link href="comment-afficher-le-log-sur-une-seule-ligne-pour-chaque-commit"/><link href="comment-afficher-un-changelog-entre-deux-tags"/><link href="comment-filtrer-le-log-sur-la-base-des-messages-de-commit"/><link href="comment-filtrer-le-log-sur-la-base-de-l-auteur-des-commits"/><link href="comment-afficher-la-liste-des-fichiers-modifies-pour-chaque-commit-du-log"/><link href="comment-trouver-qui-a-modifie-quelle-ligne-dans-un-fichier-donne-blame"/></section><section id="outils"><title>Outils</title><link href="github"/><link href="gitlab"/><link href="qu-elle-est-la-difference-entre-une-pull-request-github-et-une-merge-request-gitlab"/></section><section id="contribuer-a-un-projet-opensource"><title>Contribuer à un projet OpenSource</title><link href="quels-sont-les-usages-a-respecter-habituellement-avant-de-proposer-une-contribution"/><link href="comment-proposer-un-sujet-de-contribution"/><link href="pourquoi-est-il-necessaire-de-forker-le-projet-sur-lequel-on-souhaite-contribuer"/><link href="comment-initialiser-son-depot-local-pour-preparer-une-contribution"/><link href="quelles-sont-les-etapes-habituelles-d-une-contribution-de-code"/><link href="qu-est-ce-que-cela-m-apporte-de-contribuer-a-un-projet-opensource"/></section></summary>
    <!-- Liste des questions de la FAQ -->
    <QAs><QA create_date="2018-11-19" last_update="2019-03-08" name="qu-est-ce-que-git"><question>Qu’est ce que Git ?</question><author name="marco46"/><keywords>Git, Généralités</keywords><answer><paragraph>Git est un système de contrôle de révision décentralisé et rapide.</paragraph><paragraph>Il a été écrit en 2005 à l’initiative de Linus Torvalds pour gérer les sources du kernel Linux.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="que-signifie-git"><question>Que signifie Git ?</question><author name="marco46"/><keywords>Git, Généralités</keywords><answer><paragraph>Il n’y a pas de réponses précises, on ne sait pas s’il s’agit d’un acronyme ou d’un mot. Le nom date de la toute première livraison du projet.<br />Le fichier <link href="https://github.com/git/git/blob/master/README.md">README du projet</link> contient quelques explications.<br />En argot britannique il s’agit également d’une insulte.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="ou-trouver-de-la-documentation-pour-git"><question>Où trouver de la documentation pour Git ?</question><author name="marco46"/><keywords>Git, Généralités</keywords><answer><paragraph>Le site officiel est disponible à l’adresse <link href="https://git-scm.com/">https://git-scm.com/</link>. La documentation est hébergée <link href="https://git-scm.com/doc">au même endroit</link>.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="ou-trouver-le-code-source-de-git"><question>Où trouver le code source de Git ?</question><author name="marco46"/><keywords>Git, Généralités</keywords><answer><paragraph>Un miroir du code du projet est hébergé sur <link href="https://github.com/git/git">GitHub</link>.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="quelles-sont-les-differences-entre-un-scm-centralise-comme-subversion-et-un-scm-decentralise-comme-git"><question>Quelles sont les différences entre un SCM centralisé comme Subversion et un SCM décentralisé comme Git ?</question><author name="marco46"/><keywords>Git, Généralités</keywords><answer><paragraph>Elles sont trop nombreuses pour être listées dans une FAQ, mais d’une manière générale :</paragraph><liste><element>pas d’autorité centrale obligatoire ;</element><element>un utilisateur clonant un projet dispose de la totalité de l’historique sur sa machine ;</element><element>tout est fait hors-ligne ;</element><element>il n’y a pas besoin d’un serveur central pour partager du code entre deux développeurs.</element></liste></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="qu-est-ce-qu-un-depot-repository-git"><question>Qu’est-ce qu’un dépôt (repository) Git ?</question><author name="marco46"/><keywords>Git, Généralités</keywords><answer><paragraph>Il s’agit d’un répertoire versionné par Git. Ce répertoire contient à sa racine un répertoire <inline>.git</inline> contenant toutes les données liées à ce dépôt.<br />Un dépôt Git est donc autoporté via ce répertoire et peut être déplacé depuis le répertoire racine (pour backup ou autre).<br />Aucune information nécessaire à l’usage du dépôt n’est stockée à l’extérieur.</paragraph><paragraph>Un dépôt Git correspond généralement à un projet unique, mais ce n’est pas forcément le cas.<br />Certaines organisations utilisent un dépôt unique pour gérer les codes sources de tous leurs projets.<br />Cette stratégie est nommée la « monorepo strategy ».<br />C’est notamment le cas de Google qui a expliqué en détail sa stratégie lors d’<link href="https://www.youtube.com/watch?v=W71BTkUbdqE">une conférence en 2015</link>.</paragraph><paragraph>Un dépôt est donc composé d’un répertoire <inline>.git</inline> et du répertoire de travail.<br />Le répertoire <inline>.git</inline> contient toutes les meta-données du dépôt.<br />Le répertoire de travail (le répertoire courant) reflète l’état actuel <inline>checkout</inline> par Git (un commit, une branche ou un tag).</paragraph><paragraph>Il est à noter qu’un dépôt Git peut être utilisé entièrement en local et cela même, s’il n’est pas partagé et que vous êtes le seul utilisateur.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="qu-est-ce-qu-depot-distant-remote"><question>Qu’est-ce qu’dépôt distant (<i>remote</i>) ?</question><author name="marco46"/><keywords>Git, Généralités</keywords><answer><paragraph>Il s’agit d’un dépôt nu (<i>bare repository</i> en anglais) servant d’espace de partage.<br />Il peut être local (si vous exposez vos sources depuis votre propre machine) ou distant.<br />Il est généralement accompagné d’un client web pour fournir une solution de gestion de projet intégrée (GitHub, GitLab, Gitblit…).</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="que-designent-les-termes-upstream-et-downstream"><question>Que désignent les termes upstream et downstream ?</question><author name="marco46"/><keywords>Git, Généralités</keywords><answer><paragraph>Ces termes sont souvent employés dans les conversations en anglais à propos de Git et également dans sa documentation officielle.</paragraph><paragraph><i>upstream</i> désigne le dépôt distant depuis lequel vous tirez des informations vers votre dépôt local (<inline>clone</inline>, <inline>pull</inline>, <inline>fetch</inline>…) ou vers lequel vous poussez des informations (<inline>push</inline>). Par conséquent, c’est la centralisation du travail de tous les contributeurs.</paragraph><paragraph><i>downstream</i> désigne tous les dépôts qui dépendent d’un <i>upstream</i> pour leur synchronisation.</paragraph><paragraph>Si par exemple vous avez un projet hébergé sur un site comme GitHub ou GitLab, le dépôt sur ce site est l’<i>upstream</i>, le dépot officiel du projet, et chaque dépôt cloné depuis l’<i>upstream</i> est un <i>downstream</i>.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-installer-git-sur-windows"><question>Comment installer Git sur Windows ?</question><author name="marco46"/><keywords>Git, installation, configuration</keywords><answer><paragraph>Téléchargez le client Git approprié depuis <link href="https://git-scm.com/downloads">la page officielle</link>, lancez l’installeur et suivez les instructions.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-installer-git-sur-macos"><question>Comment installer Git sur macOS ?</question><author name="mickael-baron"/><keywords>Git, installation, configuration</keywords><answer><paragraph>Il existe plusieurs façons d’installer Git sous macOS.</paragraph><liste><element>La première façon consiste à installer XCode qui inclut Git (Apple Git-xy). Depuis un terminal, saisir la ligne de commande =&gt; <inline>xcode-select --install</inline>.</element><element>La deuxième façon consiste à utiliser <link href="https://sourceforge.net/projects/git-osx-installer/">Git-osx-install</link>. Téléchargez le fichier .dmg et lancez l’installation en suivant les instructions.</element><element>La troisième façon consiste à utiliser <link href="https://brew.sh/index_fr">Homebrew</link>. En supposant que <link href="https://brew.sh/index_fr">Homebrew</link> soit installé, depuis un terminal saisir la ligne de commande =&gt; <inline>brew install git</inline>.</element></liste></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-installer-git-sur-linux"><question>Comment installer Git sur Linux ?</question><author name="littlewhite"/><keywords>Git, installation, configuration</keywords><answer><paragraph>Pour la majorité des distributions, Git sera disponible au travers du gestionnaire de paquets.<br />Par exemple, pour Debian, vous pouvez l’installer ainsi :</paragraph><code langage="bash" showLines="1"><![CDATA[apt-get install git]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-connaitre-la-liste-des-commandes-git"><question>Comment connaitre la liste des commandes Git ?</question><author name="marco46"/><keywords>Git, installation, configuration</keywords><answer><code langage="bash" showLines="1"><![CDATA[$ git help
usage: git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-connaitre-la-version-de-votre-git"><question>Comment connaitre la version de votre Git ?</question><author name="marco46"/><keywords>Git, installation, configuration</keywords><answer><code langage="bash" showLines="1"><![CDATA[$ git version
git version 2.19.1]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="quels-sont-les-fichiers-de-configuration-de-git"><question>Quels sont les fichiers de configuration de Git ?</question><author name="marco46"/><keywords>Git, installation, configuration</keywords><answer><paragraph>Les fichiers de configuration de Git sont les suivants (l’ordre ci-dessous correspond à l’ordre de lecture par Git, la dernière valeur lue est la valeur prise en compte) :</paragraph><liste type="1"><element>dans le répertoire d’installation de Git (e.g. <inline>C:\ProgramData\Git\config</inline>) ;</element><element>la configuration système (e.g. <inline>C:\Program Files\Git\mingw64\etc\gitconfig</inline>) ;</element><element>la configuration globale dans le répertoire utilisateur (<inline>%HOMEPATH%\.gitconfig</inline>) ;</element><element>la configuration locale (spécifique à un répertoire) (<inline>.git/config</inline>).</element></liste></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-afficher-la-configuration-courante-de-git"><question>Comment afficher la configuration courante de Git ?</question><author name="marco46"/><keywords>Git, installation, configuration</keywords><answer><code langage="bash" showLines="1"><![CDATA[$ git config --list
user.name=marlou
user.email=pro@marc-loupias.fr
core.autocrlf=false
core.excludesfile=/home/marco/.gitignore_global
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
remote.origin.url=https://github.com/MarcLoupias/dev.com-faq-git.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master]]></code><paragraph>L’option <inline>--show-origin</inline> permet d’afficher en face d’une option dans quel fichier de configuration la configuration est définie.</paragraph><code langage="bash" showLines="1"><![CDATA[$ git config --list --show-origin
file:/home/marco/.gitconfig     user.name=marlou
file:/home/marco/.gitconfig     user.email=pro@marc-loupias.fr
file:/home/marco/.gitconfig     core.autocrlf=false
file:/home/marco/.gitconfig     core.excludesfile=/home/marco/.gitignore_global
file:.git/config        core.repositoryformatversion=0
file:.git/config        core.filemode=true
file:.git/config        core.bare=false
file:.git/config        core.logallrefupdates=true
file:.git/config        remote.origin.url=https://github.com/MarcLoupias/dev.com-faq-git.git
file:.git/config        remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
file:.git/config        branch.master.remote=origin
file:.git/config        branch.master.merge=refs/heads/master
]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-exclure-des-fichiers"><question>Comment exclure des fichiers ?</question><author name="marco46"/><keywords>Git, installation, configuration</keywords><answer><paragraph>Il existe trois manières d’exclure des fichiers du champ de Git :</paragraph><liste><element>par projet: créer un fichier <inline>.gitignore</inline> dans le dépôt ;</element><element>par dépôt: dans le fichier <inline>.git/info/excludes</inline> ;</element><element>par machine : au travers du fichier <inline>~/.gitignore_global</inline> qui est un fichier référencé par défaut depuis la configuration utilisateur de <inline>~/.gitconfig</inline>.</element></liste></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-changer-son-nom-d-utilisateur"><question>Comment changer son nom d’utilisateur ?</question><author name="marco46"/><keywords>Git, installation, configuration</keywords><answer><code langage="bash" showLines="1"><![CDATA[git config --global user.name "votre nom"]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-changer-son-email"><question>Comment changer son email ?</question><author name="marco46"/><keywords>Git, installation, configuration</keywords><answer><code langage="bash" showLines="1"><![CDATA[git config --global user.email moi@domaine.tld]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-changer-l-url-d-un-depot-distant"><question>Comment changer l’URL d’un dépôt distant ?</question><author name="marco46"/><keywords>Git, installation, configuration</keywords><answer><code langage="bash" showLines="1"><![CDATA[$ git remote set-url origin https://domaine.tld/repo.git
# ou
$ git remote add origin https://domaine.tld/repo.git]]></code><paragraph>A pour effet de changer l’url pour le <inline>fetch</inline> et pour le <inline>push</inline>.</paragraph><paragraph>Pour limiter l’effet du changement à la <inline>push</inline> url uniquement, ajouter l’option <inline>--push</inline> :</paragraph><code langage="bash" showLines="1"><![CDATA[git remote set-url --push origin https://domain.tld/repo.git]]></code><paragraph>Notez l’absence d’une option <inline>-fetch</inline> pour changer la <inline>fetch</inline> url. Lorsque l’upstream de <inline>pull</inline> et l’upstream de <inline>push</inline> sont différents, il est recommandé d’avoir des alias différents pour les remotes plutôt qu’un seul alias avec deux urls différentes.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-initialiser-un-depot"><question>Comment initialiser un dépôt ?</question><author name="marco46"/><keywords>Git, initialisation, dépôt, cloner</keywords><answer><code langage="bash" showLines="1"><![CDATA[$ cd /home/user/dev/projet-toto
$ git init
Initialized empty Git repository in /home/user/dev/projet-toto/.git/]]></code><paragraph>Initialise un dépôt dans le répertoire courant. Le dépôt est composé du répertoire <inline>.git</inline> contenant les métadonnées du dépôt et le répertoire de travail (<i>working directory</i>).</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-initialiser-un-depot-nu-bare-repository"><question>Comment initialiser un dépôt nu (<i>bare repository</i>) ?</question><author name="marco46"/><keywords>Git, initialisation, dépôt, cloner</keywords><answer><code langage="bash" showLines="1"><![CDATA[git init --bare]]></code><paragraph>Un dépôt nu ne contient pas de répertoire de travail. On ne peut donc pas travailler avec (créer des commits etc.). Il sert seulement à partager son travail (utilisé comme source pour les autres). Généralement les dépôts sans répertoire de travail (<i>bare repository</i>) sont créés par des outils web comme GitHub ou GitLab pour centraliser le travail entre développeurs et faciliter la collaboration via diverses fonctionnalités (gestion des issues, des milestones…)</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-cloner-un-depot"><question>Comment cloner un dépôt ?</question><author name="marco46"/><keywords>Git, initialisation, dépôt, cloner</keywords><answer><code langage="bash" showLines="1"><![CDATA[git clone <url>]]></code><paragraph>Où <inline>&lt;url&gt;</inline> est l’url du dépôt Git à cloner.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-connaitre-l-etat-du-depot"><question>Comment connaitre l’état du dépôt ?</question><author name="marco46"/><keywords>Git, initialisation, dépôt, cloner</keywords><answer><paragraph>Indique sur quelle branche on se trouve actuellement et donne l’état du répertoire de travail (<i>working directory</i>).</paragraph><paragraph>Par exemple avec un répertoire de travail (<i>working directory</i>) propre :</paragraph><code langage="bash" showLines="1"><![CDATA[$ git status
# On branch master
nothing to commit, working directory clean]]></code><paragraph>Autre exemple avec un répertoire de travail (<i>working directory</i>) contenant des modifications en cours :</paragraph><code langage="bash" showLines="1"><![CDATA[$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#      modified:   index.html
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#
#      modified:   lib/simplegit.rb
#]]></code><paragraph>Dans cet exemple le fichier <inline>index.html</inline> a été modifié et a été indexé pour être embarqué dans le prochain commit. Le fichier <inline>lib/simplegit.rb</inline> a été modifié mais n’est pas indexé.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-lister-les-depots-distants-d-un-depot"><question>Comment lister les dépôts distants d’un dépôt ?</question><author name="marco46"/><keywords>Git, dépôt, remote</keywords><answer><code langage="bash" showLines="1"><![CDATA[$ git remote -v
origin https://www.domain.tld/git/repo.git (fetch)
origin https://www.domain.tld/git/repo.git (push)]]></code><paragraph>Un dépôt distant (<i>remote</i>) est désigné par deux URL, une URL de <inline>fetch</inline> (indique où tirer les modifications effectuées par les autres développeurs) et une URL de <inline>push</inline> (indique où pousser ses propres modifications).</paragraph><paragraph>Certaines organisations adoptent le <inline>forking model</inline> pour gérer la collaboration dans le projet. Un nouveau développeur clonera le projet depuis le dépôt central, forkera ensuite ce dépôt puis changera l’URL pour pousser sur son fork au lieu du dépôt central. Les modifications du fork vers le dépot central seront effectuées au travers pull/merge request depuis l’outil web présent sur le dépot central (GitHub, GitLab…). Ce modèle a pour avantage de simplifier et de sécuriser fortement la gestion des droits en écriture sur le dépôt central.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-ajouter-un-depot-distant"><question>Comment ajouter un dépôt distant ?</question><author name="marco46"/><keywords>Git, dépôt, remote</keywords><answer><code langage="bash" showLines="1"><![CDATA[git remote add <alias> <chemin/url>]]></code><paragraph>Où <inline>&lt;alias&gt;</inline> désigne le nom du dépôt distant (<i>remote</i>).</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-inspecter-un-depot-distant"><question>Comment inspecter un dépôt distant ?</question><author name="marco46"/><keywords>Git, dépôt, remote</keywords><answer><code langage="bash" showLines="1"><![CDATA[$ git remote show origin
* distante origin
  URL de rapatriement : https://github.com/MarcLoupias/dev.com-faq-git.git
  URL push : https://github.com/MarcLoupias/dev.com-faq-git.git
  Branche HEAD : master
  Branche distante :
    master suivi
  Branche locale configurée pour 'git pull' :
    master fusionne avec la distante master
  Référence locale configurée pour 'git push' :
    master pousse vers master (à jour)]]></code><paragraph>Affiche l’état du dépôt distant (<inline>fetch</inline> et <inline>push</inline>), liste des branches, si elles sont trackées ou non, branches locales configurées pour un <inline>pull</inline> et pour un <inline>push</inline>.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-supprimer-un-depot-distant"><question>Comment supprimer un dépôt distant ?</question><author name="marco46"/><keywords>Git, dépôt, remote</keywords><answer><code langage="bash" showLines="1"><![CDATA[git remote rm <remote>]]></code><paragraph>Où <inline>remote</inline> désigne le nom du dépôt distant.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-renommer-un-depot-distant"><question>Comment renommer un dépôt distant ?</question><author name="marco46"/><keywords>Git, dépôt, remote</keywords><answer><code langage="bash" showLines="1"><![CDATA[git remote rename <old> <new>]]></code><paragraph>Où <inline>&lt;old&gt;</inline> désigne le nom du dépôt distant à changer et <inline>&lt;new&gt;</inline> le nouveau nom à donner.</paragraph><paragraph>Par exemple :</paragraph><code langage="bash" showLines="1"><![CDATA[git remote rename origin dist]]></code><paragraph>A pour effet de modifier le nom du dépôt distant de <inline>origin</inline> en <inline>dist</inline>.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-mettre-a-jour-la-representation-locale-d-un-depot-distant-fetch"><question>Comment mettre à jour la représentation locale d’un dépôt distant (<inline>fetch</inline>) ?</question><author name="marco46"/><keywords>Git, dépôt, remote</keywords><answer><code langage="bash" showLines="1"><![CDATA[git fetch <remote>]]></code><paragraph>Où <inline>&lt;remote&gt;</inline> correspond au nom du dépôt distant (<inline>origin</inline> par défaut lors d’un clone).</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-mettre-a-jour-une-branche-locale-avec-une-branche-distante-pull"><question>Comment mettre à jour une branche locale avec une branche distante (<inline>pull</inline>) ?</question><author name="marco46"/><keywords>Git, dépôt, remote</keywords><answer><code langage="bash" showLines="1"><![CDATA[git checkout <branche>
git pull <remote> <branche>]]></code><paragraph>Où <inline>&lt;remote&gt;</inline> correspond au nom du dépôt distant (<inline>origin</inline> par défaut lors d’un clone) et <inline>&lt;branche&gt;</inline> au nom de la branche.</paragraph><paragraph>La commande <inline>pull</inline> exécute en réalité un <inline>fetch</inline> suivi d’un <inline>merge</inline>, au détail cela donnerait :</paragraph><code langage="bash" showLines="1"><![CDATA[git checkout master
git fetch origin
git merge origin/master]]></code><paragraph>L’exécution d’une commande <inline>pull</inline> peut donc nécessiter de résoudre des conflits puisqu’il s’agit d’un <inline>merge</inline>.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-mettre-a-jour-un-depot-distant-push"><question>Comment mettre à jour un dépôt distant (<inline>push</inline>) ?</question><author name="marco46"/><keywords>Git, dépôt, remote</keywords><answer><code langage="bash" showLines="1"><![CDATA[git push origin toto]]></code><paragraph>A pour effet de mettre à jour la branche <inline>toto</inline> sur le dépôt distant nommé <inline>origin</inline>.</paragraph><paragraph>Si la branche n’existe pas sur le dépôt distant elle est créée.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="qu-est-ce-que-le-repertoire-de-travail-working-directory"><question>Qu’est-ce que le répertoire de travail (<i>working directory</i>) ?</question><author name="marco46"/><keywords>Git, working, directory, checkout</keywords><answer><paragraph>Littérallement, il s’agit du répertoire de travail de votre dépôt. C’est<br />le répertoire qui contient tous les fichiers suceptibles d’être dans le dépôt.<br />Il contient le dossier <inline>.git</inline> permettant à Git de sauvegarder les méta-données.</paragraph><paragraph>Il expose l’état actuel d’une branche, d’un commit ou d’un tag du projet.</paragraph><paragraph>C’est depuis le répertoire de travail (<i>working directory</i>) que l’on effectue les modifications souhaitées sur nos fichiers.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-changer-l-etat-du-repertoire-de-travail-working-directory"><question>Comment changer l’état du répertoire de travail (<i>working directory</i>) ?</question><author name="marco46"/><keywords>Git, working, directory, checkout</keywords><answer><paragraph>La commande <inline>git checkout</inline> peut prendre en paramètre un hash de commit, un nom de branche ou un nom de tag. L’exécution de cette commande change le répertoire de travail (<i>working directory</i>) pour exposer l’état du commit, de la branche ou du tag.</paragraph><code langage="bash" showLines="1"><![CDATA[git checkout 3ffb92fe20b6785d801023783d2f18c4de6e1593]]></code><paragraph>A pour effet de changer l’état du répertoire de travail (<i>working directory</i>) en l’état correspondant au commit désigné. Concrètement, Git modifie les fichiers traqués pour les mettre dans l’état correspondant au commit désigné.</paragraph><paragraph>Idem avec un nom de branche :</paragraph><code langage="bash" showLines="1"><![CDATA[git checkout master]]></code><paragraph>Ou avec un tag :</paragraph><code langage="bash" showLines="1"><![CDATA[git checkout 1.0.0]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-connaitre-l-etat-du-repertoire-de-travail-working-directory-selon-git"><question>Comment connaitre l’état du répertoire de travail (<i>working directory</i>) selon Git ?</question><author name="marco46"/><keywords>Git, working, directory, checkout</keywords><answer><code langage="bash" showLines="1"><![CDATA[$ git status
On branch master
nothing to commit, working directory clean]]></code><paragraph>Indique qu’on a <inline>checkout</inline> la branche <inline>master</inline> et que rien n’est modifié.</paragraph><paragraph><b>En cas de doute</b>, toujours exécuter un <inline>git status</inline> pour savoir dans quel état se situe Git<br />et surtout, pour savoir si vous avez des fichiers en attente d’être commité, à ajouter à votre commit ou<br />non versionné.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-annuler-les-modifications-effectuees-sur-un-fichier-du-repertoire-de-travail"><question>Comment annuler les modifications effectuées sur un fichier du répertoire de travail ?</question><author name="marco46"/><keywords>Git, working, directory, checkout</keywords><answer><paragraph>Si nous avons modifié le fichier <inline>nom-fichier.txt</inline> :</paragraph><code langage="bash" showLines="1"><![CDATA[git checkout -- nom-fichier.txt]]></code><paragraph>A pour effet de supprimer toutes les modifications effectuées dans le fichier.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="que-veut-dire-detached-head-state-apres-avoir-effectue-un-git-checkout"><question>Que veut dire <inline>&quot;detached HEAD&quot; state</inline> après avoir effectué un <inline>git checkout</inline> ?</question><author name="marco46"/><keywords>Git, working, directory, checkout</keywords><answer><paragraph>Vous obtenez ce genre de message après un <inline>checkout</inline> sur un commit ou sur un tag :</paragraph><code langage="bash" showLines="1"><![CDATA[$ git checkout 0.4.14
Note: checking out '0.4.14'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD est maintenant sur 2ef6cee... Version bump]]></code><paragraph>La variable <inline>HEAD</inline> est un alias du commit de tête de la branche courante. Lorsque vous ajoutez des commits à la branche, la variable <inline>HEAD</inline> est mise à jour.</paragraph><paragraph>En mode détaché ce ne sera plus le cas.</paragraph><paragraph>Pour ajouter des commits au dépôt il est donc nécessaire de se trouver sur une branche, c’est le concept qui représente une ligne de développement.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="quel-est-l-interet-de-faire-un-checkout-sur-un-tag"><question>Quel est l’intérêt de faire un <i>checkout</i> sur un tag ?</question><author name="marco46"/><keywords>Git, working, directory, checkout</keywords><answer><paragraph>Une raison courante de vouloir <inline>checkout</inline> un tag est de vouloir créer un hotfix. Dans ce cas on va <inline>checkout</inline> le tag puis immédiatement créer une nouvelle branche :</paragraph><code langage="bash" showLines="1"><![CDATA[git checkout 0.4.14
git checkout -b hotfix/0.4.15]]></code><paragraph>Le développement du hotfix peut alors démarrer sur la branche <inline>hotfix/0.4.15</inline><br />tout en repartant de où la branche 0.4.14 était restée.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="qu-est-ce-que-l-index"><question>Qu’est ce que l’index ?</question><author name="marco46"/><keywords>Git, add, index, staging</keywords><answer><paragraph>Nommée également <i>zone de staging</i> ou encore la <i>staging area</i>.</paragraph><paragraph>C’est le creuset dans lequel vous préparez le prochain commit à créer sur la branche courante.</paragraph><paragraph>Lorsque vous modifiez un fichier du répertoire de travail (<i>working directory</i>), la modification doit être indexée (on dit aussi placée dans l’index) pour être embarquée dans le prochain commit.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-ajouter-un-fichier-a-l-index"><question>Comment ajouter un fichier à l’index ?</question><author name="marco46"/><keywords>Git, add, index, staging</keywords><answer><paragraph>Sur la branche <inline>master</inline> vous créez un fichier <inline>nom-fichier.txt</inline>, un <inline>git status</inline> vous indique l’état du répertoire de travail :</paragraph><code langage="bash" showLines="1"><![CDATA[$ git status
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        nom-fichier.txt

nothing added to commit but untracked files present (use "git add" to track)]]></code><paragraph>Il suffit de lire la sortie de la ligne de commande pour comprendre ce qu’il faut exécuter :</paragraph><code langage="bash" showLines="1"><![CDATA[git add nom-fichier.txt]]></code><paragraph>Ajoute le fichier <inline>nom-fichier.txt</inline> à l’index. Un <inline>git status</inline> le confirme :</paragraph><code langage="bash" showLines="1"><![CDATA[$ git status
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   nom-fichier.txt]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-retirer-un-fichier-de-l-index"><question>Comment retirer un fichier de l’index ?</question><author name="marco46"/><keywords>Git, add, index, staging</keywords><answer><paragraph>Cela dépend s’il s’agit d’un fichier qui vient d’être créé et qui n’est donc pas déjà versionné par Git ou s’il s’agit d’une modification d’un fichier existant. Dans l’exemple précédent nous avons créé un fichier, la commande est donc :</paragraph><code langage="bash" showLines="1"><![CDATA[git rm --cached nom-fichier.text]]></code><paragraph>Si le fichier existait déjà la commande :</paragraph><code langage="bash" showLines="1"><![CDATA[$ git reset HEAD nom-fichier.txt
Unstaged changes after reset:
M       nom-fichier.txt]]></code><paragraph>Permet de retirer un fichier de l’index : <b>Les modifications ne sont pas supprimées</b>.</paragraph><paragraph>Git nous l’indique avec le <inline>M</inline> devant le nom du fichier. Il signifie qu’il y a des modifications dans le fichier <inline>nom-fichier.txt</inline> qui ne sont pas présentes dans l’index.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="qu-est-ce-qu-un-commit"><question>Qu’est ce qu’un <i>commit</i> ?</question><author name="marco46"/><keywords>Git, commit</keywords><answer><paragraph>Un <i>commit</i> est une révision du code source. Il est identifié par une empreinte numérique générée par une fonction de hachage (algorithme SHA-1).</paragraph><paragraph>Un <i>commit</i> est composé de métadonnées et du contenu (le code source) à versionner.</paragraph><paragraph>Les métadonnées sont :</paragraph><liste><element>le message du <i>commit</i> ;</element><element>le <i>committer</i> (l’utilisateur qui a créé le <i>commit</i>) ;</element><element>la date de création du <i>commit</i> (au format <inline>RFC2822</inline> par défaut, par exemple : <inline>Tue Oct 9 00:58:43 2018 +0200</inline>) ;</element><element>l’auteur (l’utilisateur qui a créé le contenu du <i>commit</i>) ;</element><element>la date de création du contenu (au format <inline>RFC2822</inline>) ;</element><element>l’identifiant (SHA1 donc) du <i>commit</i> parent (avec deux exceptions, si vous créez le premier <i>commit</i> du dépôt alors il n’y a pas de parents et s’il s’agit d’un <i>commit</i> de merge alors il en a deux).</element></liste><paragraph>Sans entrer dans les détails internes du fonctionnement de Git, retenez simplement que par « contenu » on entend à la fois les modifications ajoutées à l’index (<i>staging area</i>) et également les fichiers et répertoires non modifiés.</paragraph><paragraph>L’empreinte numérique est appliquée sur les <b>métadonnées</b> et le <b>contenu</b>.</paragraph><paragraph>Ainsi un <i>commit</i> bénéficie des propriétés des empreintes numériques :</paragraph><liste><element>c’est rapide ;</element><element>deux <i>commits</i> différents ne peuvent pas avoir le même identifiant ;</element><element>il n’est pas possible de modifier les métadonnées ou le contenu d’un <i>commit</i> sans modifier son identifiant.</element></liste><paragraph>Pour plus de détails, on peut se référer à <link href="https://git-scm.com/book/fr/v2/Les-tripes-de-Git-Plomberie-et-porcelaine">la documentation officielle</link> ou à <link href="https://alm.developpez.com/tutoriel/fonctionnement-interne-de-git/">un tutoriel sur developpez.com</link>.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-creer-un-commit"><question>Comment créer un <i>commit</i> ?</question><author name="marco46"/><keywords>Git, commit</keywords><answer><paragraph>Il est nécessaire d’avoir au préalable ajouté des fichiers à l’index (<i>staging area</i>).</paragraph><code langage="bash" showLines="1"><![CDATA[git commit]]></code><paragraph>Utilisée seule elle permet d’ouvrir l’éditeur de texte de votre ligne de commande (<b>vim</b> sous macOS et sous Windows via Git BASH, <b>nano</b> sous Ubuntu par exemple) afin d’y saisir le message de <i>commit</i>.</paragraph><paragraph>Si aucun fichier n’a été ajouté à l’index, il est possible de passer l’option <inline>-a</inline> qui demande à Git de prendre tous les fichiers modifiés présents dans le répertoire de travail (<i>working directory</i>).</paragraph><paragraph>Une utilisation courante des options est : <inline>git commit -am &quot;message de commit&quot;</inline> ce qui permet de prendre toutes les modifications en cours et d’ajouter un message de <i>commit</i> dans le même temps.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-ajouter-un-message-en-creant-un-commit"><question>Comment ajouter un message en créant un <i>commit</i> ?</question><author name="marco46"/><keywords>Git, commit</keywords><answer><paragraph>L’option <inline>-m</inline> permet d’ajouter un message.</paragraph><paragraph>Par exemple :</paragraph><code langage="bash" showLines="1"><![CDATA[git commit -m "message de commit"]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-modifier-le-message-d-un-commit-existant"><question>Comment modifier le message d’un <i>commit</i> existant ?</question><author name="marco46"/><keywords>Git, commit</keywords><answer><code langage="bash" showLines="1"><![CDATA[git commit --amend -m "nouveau message de commit"]]></code><paragraph>Comme expliqué dans la première question, ceci a pour effet de modifier le SHA1 du <i>commit</i>.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-supprimer-le-dernier-commit-de-la-branche-courante-sans-perdre-les-modifications"><question>Comment supprimer le dernier <i>commit</i> de la branche courante sans perdre les modifications ?</question><author name="marco46"/><keywords>Git, commit</keywords><answer><code langage="bash" showLines="1"><![CDATA[git reset --soft HEAD^]]></code><paragraph>Les modifications qui étaient présentes dans le <i>commit</i> supprimé sont encore présente dans l’index.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-supprimer-le-dernier-commit-de-la-branche-courante-avec-les-modifications"><question>Comment supprimer le dernier <i>commit</i> de la branche courante avec les modifications ?</question><author name="marco46"/><keywords>Git, commit</keywords><answer><code langage="bash" showLines="1"><![CDATA[git reset --hard HEAD^]]></code><paragraph>Les modifications qui étaient présentes dans le <i>commit</i> supprimé sont supprimées.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-supprimer-les-n-derniers-commits-de-la-branche-courante-sans-perdre-les-modifications"><question>Comment supprimer les “n” derniers <i>commits</i> de la branche courante sans perdre les modifications ?</question><author name="marco46"/><keywords>Git, commit</keywords><answer><code langage="bash" showLines="1"><![CDATA[git reset --soft HEAD~3]]></code><paragraph>Les trois derniers <i>commits</i> sont supprimés. Les modifications des trois derniers <i>commits</i> sont présentes dans l’index.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-supprimer-les-n-derniers-commits-de-la-branche-courante-avec-les-modifications"><question>Comment supprimer les “n” derniers <i>commits</i> de la branche courante avec les modifications ?</question><author name="marco46"/><keywords>Git, commit</keywords><answer><code langage="bash" showLines="1"><![CDATA[git reset --hard HEAD~3]]></code><paragraph>Les trois derniers <i>commits</i> sont supprimés et les modifications qu’ils comportaient le sont avec.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-ajouter-un-commit-d-une-branche-a-dans-une-branche-b-sans-effectuer-un-merge-cherry-pick"><question>Comment ajouter un <i>commit</i> d’une branche A dans une branche B sans effectuer un merge (<i>cherry-pick</i>) ?</question><author name="marco46"/><keywords>Git, commit</keywords><answer><paragraph>Vous devez avoir <inline>checkout</inline> la branche de destination, puis vous exécutez un <inline>cherry-pick</inline> en lui passant en paramètre le hash du <i>commit</i> désiré.</paragraph><paragraph>Par exemple pour ajouter le <i>commit</i> <inline>1234abcd</inline> à la branche <inline>master</inline> :</paragraph><code langage="bash" showLines="1"><![CDATA[git checkout master
git cherry-pick 1234abcd]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-ajouter-un-commit-provenant-d-une-branche-d-un-autre-depot-a-la-branche-courante-de-ce-depot-cherry-pick"><question>Comment ajouter un <i>commit</i> provenant d’une branche d’un autre dépôt à la branche courante de ce dépôt ? (cherry-pick)</question><author name="marco46"/><keywords>Git, commit</keywords><answer><paragraph>L’astuce consiste à ajouter le dépôt source en tant que <inline>remote</inline> du dépôt courant et à <inline>fetch</inline> (et seulement <inline>fetch</inline>) ses branches.</paragraph><paragraph>Par exemple pour ajouter à <inline>master</inline> le <i>commit</i> <inline>1234abcd</inline> existant sur le dépôt <inline>boubou</inline> de l’utilisateur <inline>toto</inline> la marche à suivre est la suivante :</paragraph><code langage="bash" showLines="1"><![CDATA[git remote add boubou git://github.com/toto/boubou.git
git fetch boubou
git checkout master
git cherry-pick 1234abcd]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-annuler-un-commit-existant-revert"><question>Comment annuler un <i>commit</i> existant (<i>revert</i>) ?</question><author name="marco46"/><keywords>Git, commit</keywords><answer><paragraph>C’est la bonne manière d’annuler un <i>commit</i> existant dans un historique qui a été publié.<br />En effet une pratique essentielle est de ne jamais réécrire ou supprimer un historique qui a été publié et qui a donc pu être récupéré par un autre utilisateur.</paragraph><paragraph>Le <inline>revert</inline> ne supprime rien, il crée un nouveau <i>commit</i> qui est un miroir inverse du <i>commit</i> source.</paragraph><code langage="bash" showLines="1"><![CDATA[git revert 1234abcd]]></code><paragraph>Cette commande ajoute à la branche courante un nouveau <i>commit</i> qui sera l’exact inverse du <i>commit</i> <inline>1234abcd</inline>.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="qu-est-ce-qu-une-branche"><question>Qu’est-ce qu’une branche ?</question><author name="marco46"/><keywords>Git, branch, branche</keywords><answer><paragraph>Conceptuellement, une branche est une ligne de développement dont le but est d’ajouter de nouveaux <i>commits</i> à l’arbre des <i>commits</i> constituants le dépôt.</paragraph><paragraph>C’est depuis une branche que l’utilisateur :</paragraph><liste><element>modifie le répertoire de travail <i>working directory</i> (modification des sources) ;</element><element>ajoute à l’index ces modifications ;</element><element>et qu’il crée des <i>commits</i>.</element></liste><paragraph>Techniquement, une branche est une référence sur le dernier <i>commit</i> d’une série de <i>commits</i>. Tous les <i>commits</i> descendants font donc parti de la branche.</paragraph><paragraph>Ainsi, manipuler une branche est une opération très rapide à exécuter puisqu’il s’agit d’un pointeur et non d’un container.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-lister-les-branches-locales"><question>Comment lister les branches locales ?</question><author name="marco46"/><keywords>Git, branch, branche</keywords><answer><code langage="bash" showLines="1"><![CDATA[$ git branch -l
* master]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-lister-toutes-les-branches-locales-distantes-traquees-non-traquees"><question>Comment lister toutes les branches (locales, distantes, traquées, non-traquées) ?</question><author name="marco46"/><keywords>Git, branch, branche</keywords><answer><code langage="bash" showLines="1"><![CDATA[$ git remote show origin

* distante origin
  URL de rapatriement : https://github.com/<user>/<repo>.git
  URL push : https://github.com/<user>/<repo>.git
  Branche HEAD : master
  Branche distante :
    master suivi
  Branche locale configurée pour 'git pull' :
    master fusionne avec la distante master
  Référence locale configurée pour 'git push' :
    master pousse vers master (à jour)
]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-creer-une-branche"><question>Comment créer une branche ?</question><author name="marco46"/><keywords>Git, branch, branche</keywords><answer><code langage="bash" showLines="1"><![CDATA[git checkout -b <nom-branche>]]></code><paragraph>Cette commande a pour effet une branche sur la base de celle actuellement active puis de <inline>checkout</inline> la branche nouvellement créée (la rendre active).</paragraph><paragraph>Cette création est évidemment seulement locale.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-creer-une-branche-sur-une-depot-distant"><question>Comment créer une branche sur une dépôt distant ?</question><author name="marco46"/><keywords>Git, branch, branche</keywords><answer><paragraph>Il faut créer la branche en local puis la pousser sur le dépôt distant :</paragraph><code langage="bash" showLines="1"><![CDATA[git checkout -b <nom-branche>
git push <nom-remote> <nom-branche>]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-supprimer-une-branche"><question>Comment supprimer une branche ?</question><author name="marco46"/><keywords>Git, branch, branche</keywords><answer><code langage="bash" showLines="1"><![CDATA[git branch -D <nom-branche>]]></code><paragraph>L’option <inline>-d</inline> peut être utilisée à la place de l’option <inline>-D</inline> mais seulement si la branche a auparavant été <inline>merge</inline> dans la branche parente.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-supprimer-une-branche-distante"><question>Comment supprimer une branche distante ?</question><author name="marco46"/><keywords>Git, branch, branche</keywords><answer><code langage="bash" showLines="1"><![CDATA[git push <nom-remote> --delete <nom-branche>]]></code><paragraph>La branche à supprimer doit avoir été fusionnée dans son parent sinon la suppression sera refusée.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-renommer-une-branche"><question>Comment renommer une branche ?</question><author name="marco46"/><keywords>Git, branch, branche</keywords><answer><code langage="bash" showLines="1"><![CDATA[git branch -m <nouveau-nom>]]></code><paragraph>Ne fonctionnera pas si <inline>&lt;nouveau-nom&gt;</inline> est déjà utilisé pour un nom de branche.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-comparer-deux-branches"><question>Comment comparer deux branches ?</question><author name="marco46"/><keywords>Git, branch, branche</keywords><answer><paragraph>Il y a deux axes de comparaison possibles, on peut vouloir comparer :</paragraph><liste><element>les séries de <i>commits</i> des branches (les historiques des <i>commits</i>) ;</element><element>l’état des fichiers (les contenus des <i>commits</i>).</element></liste></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-comparer-deux-branches-pour-connaitre-les-historiques-des-commits"><question>Comment comparer deux branches pour connaître les historiques des <i>commits</i> ?</question><author name="marco46"/><keywords>Git, branch, branche</keywords><answer><paragraph>Cette question est donc de savoir ce que l’on cherche à comparer.</paragraph><paragraph>Pour comparer les historiques de deux branches, on se réfèrera à la commande <inline>git log</inline>, pour comparer l’état des fichiers on se réfèrera à la commande <inline>git diff</inline>.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-comparer-deux-branches-pour-connaitre-les-contenus-des-commits"><question>Comment comparer deux branches pour connaître les contenus des <i>commits</i> ?</question><author name="marco46"/><keywords>Git, branch, branche</keywords><answer><paragraph>Cette question est donc de savoir comment comparer les branches.</paragraph><paragraph>Ceci est déterminé par les <i>range operator</i> « double dot » (<inline>..</inline>) et « triple dot » (<inline>...</inline>).</paragraph><paragraph>L’usage se fait de cette manière : <inline>git log A..B</inline> ou <inline>git diff A..B</inline>.</paragraph><paragraph>Attention, selon la commande utilisée (<inline>log</inline> ou <inline>diff</inline>), la sémantique des opérateurs est différente.</paragraph><paragraph>Dans le cas de <inline>git log</inline>.</paragraph><liste><element><inline>..</inline> permet de connaitre les éléments présents dans l’un mais pas dans l’autre.</element><element><inline>...</inline> permet de connaitre tous les éléments qui ne sont pas partagés.</element></liste><paragraph>Dans le cas de <inline>git diff</inline>.</paragraph><liste><element><inline>..</inline> permet de connaitre les différences de contenu entre les têtes (dernier <i>commit</i>, nommé souvent <i>tip</i> en anglais) des deux branches.</element><element><inline>...</inline> permet de connaitre les différences entre la tête de B et la <i>merge base</i> (le dernier <i>commit</i> commun dans l’arbre) commune avec A.</element></liste></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-comparer-les-historiques-de-deux-branches"><question>Comment comparer les historiques de deux branches ?</question><author name="marco46"/><keywords>Git, branch, branche</keywords><answer><paragraph>Si je souhaite connaitre la liste des <i>commits</i> existants dans <inline>release/v1.0.0</inline> et qui n’existent pas dans <inline>master</inline> :</paragraph><code langage="bash" showLines="1"><![CDATA[git log release/v1.0.0..master]]></code><paragraph>Pour connaitre la liste des <i>commits</i> existants dans <inline>master</inline> et qui n’existent pas dans <inline>release/v1.0.0</inline>, on inverse simplement l’ordre :</paragraph><code langage="bash" showLines="1"><![CDATA[git log master..release/v1.0.0]]></code><paragraph>Certaines options de la commande <inline>log</inline> sont très pratiques pour affiner l’affichage brut de <inline>git log</inline>, elles peuvent être combinées.</paragraph><liste><element><paragraph><inline>--oneline</inline> permet de limiter l’affichage de chaque <i>commit</i> sur une seule ligne.</paragraph></element><element><paragraph><inline>--stat</inline> affiche la liste des fichiers modifiés et le nombre d’ajouts et suppressions, par ex :</paragraph></element></liste><code langage="bash" showLines="1"><![CDATA[$ git log --oneline --stat release/v1.0.0..master

df76163 Logs the correct path to jsonresume.json
 lib/login/login-request.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
7ee2e20 update node version in engine section to drop unmaintained node version and match travis config
 package.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
e9a998f update superagent from 2.+ to 3.+
 package.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)]]></code><paragraph>Dans le cas de l’usage de l’opérateur <i>triple dot</i> (<inline>...</inline>), l’ajout des options <inline>--left-right</inline>, <inline>--decorate</inline> et <inline>--graph</inline> permettent de rendre plus lisible le résultat.</paragraph><liste><element><paragraph><inline>--left-right</inline> ajoute à chaque ligne un <inline>&lt;</inline> ou un <inline>&gt;</inline> selon si la ligne fait référence à la première ou à la deuxième branche.</paragraph></element><element><paragraph><inline>--decorate</inline> affiche clairement les « refs » (tags, branches, <inline>HEAD</inline>) entre parenthèses après le SHA1 des <i>commits</i>.</paragraph></element><element><paragraph><inline>--graph</inline> constitue un graphe en ASCII art.</paragraph></element></liste><paragraph>Par exemple :</paragraph><code langage="bash" showLines="1"><![CDATA[$ git log --oneline --decorate --left-right --graph release/v1.0.0...master

> 332d9e9 (HEAD -> master, origin/master) Fix for themes and version bump
> 7d5f8a7 Fixed delete account issues. removed PDF exports for now
>   6d6c792 Merge pull request #290 from MarcLoupias/fix/security
|\  
| > 7ee2e20 (fork/fix/security, fix/security) update node version in engine section to drop unmaintained node version and match travis config
| > e9a998f update superagent from 2.+ to 3.+
| > be7e49d moving to an up-to-date and actively maintained package to open the browser
> | df76163 Logs the correct path to jsonresume.json
|/  
>   5aaf9b8 (fork/master, fork/HEAD) Merge pull request #275 from brandenbird/pr/change-export-to-puppeteer
|\  
| > 6e1ec92 Fixed exports for pdfs
> | f0af5f6 Update node.js version to be tested on Travis CI
> | 4938d0e Update .nvmrc to use node.js v8.x LTS
> |   eef87b2 Merge pull request #273 from jouk0/patch-1
|\ \  
| |/  
|/|
| > fa5130e Updated resume.json path change on the process arg
|/  
> ed2106d Added https to all external requests
]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-comparer-l-etat-de-tous-les-fichiers-presents-dans-deux-branches"><question>Comment comparer l’état de tous les fichiers présents dans deux branches ?</question><author name="marco46"/><keywords>Git, branch, branche</keywords><answer><code langage="bash" showLines="1"><![CDATA[git diff release/v1.0.0..master]]></code><paragraph>Cet affichage risque d’être assez indigeste si vous avez beaucoup de fichiers et de différences.</paragraph><paragraph>Une première étape pour trier pourrait être de ne pas afficher les différences en tant que telles mais de listes les fichiers et le nombre de différences qu’ils contiennent avec l’option <inline>--stat</inline> :</paragraph><code langage="bash" showLines="1"><![CDATA[$ git diff --stat release/v1.0.0..master

 .env                              |    2 +-
 .nvmrc                            |    2 +-
 .travis.yml                       |   12 +-
 README.md                         |   88 ++---
 index.js                          |  111 ++++--
 lib/builder/index.js              |   29 +-
 lib/export-resume/index.js        |  145 ++++----
 lib/export-resume/menu.js         |   24 --
 lib/init.js                       |  135 ++++---
 lib/login/login-request.js        |    4 +-
 lib/pre-flow/check-pkg-version.js |    2 +-
 lib/pre-flow/get-resume.js        |    8 +-
 lib/pre.js                        |    2 +-
 lib/publish/menu.js               |   44 +--
 lib/publish/publish-resume.js     |    6 +-
 lib/register/register-user.js     |    4 +-
 lib/register/validate.js          |    2 +-
 lib/serve.js                      |   33 +-
 lib/settings/change-password.js   |    2 +-
 lib/settings/change-theme.js      |    6 +-
 lib/settings/delete-user.js       |    2 +-
 lib/settings/menu.js              |   70 ++--
 lib/test.js                       |    6 +-
 lib/version.js                    |    2 +-
 package-lock.json                 | 1621 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 package.json                      |   29 +-
 test/index.js                     |    7 +-
 27 files changed, 2027 insertions(+), 371 deletions(-)]]></code></answer></QA><QA create_date="2018-11-19" last_update="2018-11-20" name="comment-comparer-l-etat-d-un-fichier-present-dans-deux-branches"><question>Comment comparer l’état d’un fichier présent dans deux branches ?</question><author name="marco46"/><keywords>Git, branch, branche</keywords><answer><paragraph>On ajoute simplement le chemin relatif du fichier à comparer :</paragraph><code langage="bash" showLines="1"><![CDATA[git diff release/v1.0.0..master lib/builder/index.js]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="qu-est-ce-qu-une-fusion-merge"><question>Qu’est-ce qu’une fusion (<i>merge</i>) ?</question><author name="marco46"/><keywords>Git, merge</keywords><answer><paragraph>C’est l’action de fusionner une branche avec une autre, généralement d’une branche enfant vers une branche parente.</paragraph><paragraph>Par exemple :</paragraph><paragraph>Ici nous avons une seule branche <inline>master</inline> avec un seul <i>commit</i> <inline>M1</inline>.</paragraph><code langage="text"><![CDATA[---M1 master]]></code><paragraph>Nous créons une branche <inline>toto</inline>, à la création ces deux branches pointent sur le <i>commit</i> <inline>M1</inline> :</paragraph><code langage="text"><![CDATA[---M1 master, toto]]></code><paragraph>Nous ajoutons un <i>commit</i> à la branche <inline>toto</inline> :</paragraph><code langage="text"><![CDATA[---M1 master
   \
   B1 toto]]></code><paragraph>La branche <inline>master</inline> est toujours constituée seulement du <i>commit</i> <inline>M1</inline>, la branche <inline>toto</inline> elle est constituée du <i>commit</i> <inline>M1</inline> suivi du <i>commit</i> <inline>B1</inline> qui a pour parent le <i>commit</i> <inline>M1</inline>.</paragraph><paragraph>Nous ajoutons de nouveaux <i>commits</i> sur la branche <inline>toto</inline> :</paragraph><code langage="text"><![CDATA[---M1 master
   \
   B1---B2---B3 toto]]></code><paragraph>La branche <inline>master</inline> est toujours constituée seulement du <i>commit</i> <inline>M1</inline>, la branche <inline>toto</inline> elle est constituée des <i>commits</i> <inline>M1</inline>, <inline>B1</inline>, <inline>B2</inline> et <inline>B3</inline>.</paragraph><paragraph>L’action de fusionner les <i>commits</i> de <inline>toto</inline> dans <inline>master</inline> est l’action pour obtenir par défaut (<i>merge fast-forward</i>) cet historique :</paragraph><code langage="text"><![CDATA[M1---B1---B2---B3 master, toto]]></code><paragraph>La branche <inline>toto</inline> qui n’a plus de raisons d’être peut être alors supprimée :</paragraph><code langage="text"><![CDATA[M1---B1---B2---B3 master]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-fusionner-une-branche-toto-dans-une-branche-master"><question>Comment fusionner une branche <inline>toto</inline> dans une branche <inline>master</inline> ?</question><author name="marco46"/><keywords>Git, merge</keywords><answer><paragraph>Il faut se positionner sur la branche de destination au préalable (<i>checkout</i>) :</paragraph><code langage="text"><![CDATA[git checkout master]]></code><paragraph>Il est également important de n’avoir aucune modifications en cours dans le répertoire de travail (<i>working directory</i>) sinon Git refusera la fusion.</paragraph><paragraph>Ceci fait la fusion des deux branches est possible :</paragraph><code langage="text"><![CDATA[git merge toto]]></code><paragraph>C’est tout.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="quelle-est-la-difference-entre-un-merge-fast-forward-et-un-merge-no-fast-forward"><question>Quelle est la différence entre un <i>merge fast-forward</i> et un <i>merge no-fast-forward</i> ?</question><author name="marco46"/><keywords>Git, merge</keywords><answer><paragraph>Un <i>merge fast-forward</i> peut avoir lieu lorsque la branche parente n’a pas évolué depuis la création de la branche à fusionner.</paragraph><paragraph>Par exemple dans cette situation :</paragraph><code langage="text"><![CDATA[---M1 master
   \
   B1---B2---B3 toto]]></code><paragraph>L’exécution de <inline>git merge toto</inline> aboutira à un historique linéaire :</paragraph><code langage="text"><![CDATA[M1---B1---B2---B3 master, toto]]></code><paragraph>Notez que par défaut, Git essaiera d’effectuer un <i>merge fast-forward</i> sauf configuration ou option explicite pour forcer un <i>merge non fast-forward</i>.</paragraph><paragraph>Un <i>merge non fast-forward</i> a lieu lorsque la branche parente a évolué après la création de la branche enfante.</paragraph><paragraph>Par exemple avec la situation précédente :</paragraph><code langage="text"><![CDATA[---M1 master
   \
   B1---B2---B3 toto  ]]></code><paragraph>Avant de fusionner <inline>toto</inline> dans <inline>master</inline>, admettons que <inline>master</inline> ait reçu des <i>commits</i>, la situation devient :</paragraph><code langage="text"><![CDATA[---M1---M2---M3 master
   \
   B1---B2---B3 toto  ]]></code><paragraph>Dans ce cas Git rajoute un <i>commit</i> dit « de merge » qui aura la particularité d’avoir deux parents, ici <inline>M3</inline> et <inline>B3</inline> :</paragraph><code langage="text"><![CDATA[---M1---M2---M3---M4 master, toto
    \            /
    B1---B2---B3]]></code><paragraph>Le <i>commit</i> de <i>merge</i> est noté <inline>M4</inline>, il contient la somme des modifications de <inline>B1</inline>, <inline>B2</inline> et <inline>B3</inline>.</paragraph><paragraph>Même lorsque une branche peut être fusionnée en <i>merge fast-forward</i> on peut forcer la création du <i>commit</i> de <i>merge</i>, par exemple avec cette situation :</paragraph><code langage="text"><![CDATA[---M1 master
   \
   B1---B2---B3 toto]]></code><paragraph>L’exécution de la commande <inline>git merge --no-ff toto</inline> abouti à cette historique :</paragraph><code langage="text"><![CDATA[---M1-------------M4 master, toto
    \            /
    B1---B2---B3]]></code><paragraph>Certains utilisateurs aiment conserver la visibilité de l’existance des branches même après leur fusion et leur suppression :</paragraph><code langage="text"><![CDATA[---M1-------------M4 master
    \            /
    B1---B2---B3]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-annuler-une-fusion-terminee"><question>Comment annuler une fusion terminée ?</question><author name="marco46"/><keywords>Git, merge</keywords><answer><paragraph>La solution la plus simple consiste à supprimer les <i>commits</i> sur la branche de destination. Par exemple dans cette situation :</paragraph><code langage="text"><![CDATA[---M1-------------M4 master, toto
    \            /
    B1---B2---B3]]></code><paragraph>En se positionnant (<i>checkout</i>) sur la branche <inline>master</inline> on peut soit supprimer le dernier <i>commit</i> :</paragraph><code langage="text"><![CDATA[git reset HEAD^]]></code><paragraph>Soit donner à la commande <inline>reset</inline> le SHA1 du <i>commit</i> <inline>M1</inline> :</paragraph><code langage="text"><![CDATA[git reset --hard 1234abcd]]></code><paragraph>On revient alors à la situation précédant la fusion :</paragraph><code langage="text"><![CDATA[---M1 master
   \
   B1---B2---B3 toto]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="qu-est-ce-qu-un-conflit"><question>Qu’est-ce qu’un conflit ?</question><author name="marco46"/><keywords>Git, merge</keywords><answer><paragraph>Un conflit apparait lors d’une fusion lorsque deux fichiers ont évolué sur la même ligne de code mais différemment.</paragraph><paragraph>Git ne peut pas savoir où est la vérité, il demande donc à l’utilisateur de trancher en modifiant le fichier source à fusionner en ajoutant les deux versions possibles encadrées par des marqueurs.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-gerer-un-conflit"><question>Comment gérer un conflit ?</question><author name="marco46"/><keywords>Git, merge</keywords><answer><paragraph>Par exemple avec un conflit sur le fichier <inline>index.html</inline> lors d’une fusion de <inline>toto</inline> dans <inline>master</inline> on aurait :</paragraph><liste><element><inline>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</inline> qui désigne le début de la version de <inline>master</inline>.</element><element><inline>=======</inline> qui sépare les deux versions et débute donc la version de <inline>toto</inline>.</element><element><inline>&gt;&gt;&gt;&gt;&gt;&gt;&gt; refs/heads/toto</inline> qui désigne la fin de la version de <inline>toto</inline>.</element></liste><paragraph>Il convient ici de faire le tri et de supprimer ces marqueurs puis d’ajouter le fichier à l’index via un simple <inline>git add index.html</inline>.</paragraph><paragraph>Pour terminer la résolution de conflits vous pouvez utiliser la commande <inline>git merge --continue</inline> si votre version de Git est supérieure ou égale à la 2.12 sinon exécutez simplement un <inline>git commit</inline> sans aucune option.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-annuler-une-fusion-en-cours"><question>Comment annuler une fusion en cours ?</question><author name="marco46"/><keywords>Git, merge</keywords><answer><paragraph>Pendant la résolution des conflits exécutez simplement un <inline>git merge --abort</inline>.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="qu-est-ce-qu-un-rebase"><question>Qu’est-ce qu’un <i>rebase</i> ?</question><author name="marco46"/><keywords>Git, rebase</keywords><answer><paragraph>Conceptuellement il s’agit d’une réécriture de l’historique.</paragraph><paragraph>Techniquement il s’agit de changer le parent du <i>commit</i> à la base de la branche à <i>rebase</i> ce qui a pour conséquence de recréer tous les <i>commits</i> descendants (du fait du nouveau <i>timestamp</i>).</paragraph><paragraph>De ce fait il ne faut <b>jamais</b> <i>rebase</i> une branche qui a été publiée quelque part et donc le <i>rebase</i> ne doit s’appliquer qu’à des branches privées, c’est à dire qui n’existe que sur votre machine.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="pourquoi-effectuer-un-rebase"><question>Pourquoi effectuer un <i>rebase</i> ?</question><author name="marco46"/><keywords>Git, rebase</keywords><answer><paragraph>Principalement pour conserver un historique propre et lisible.</paragraph><paragraph>La bonne pratique est de systématiquement <i>rebase</i> une branche de travail avant de chercher à la fusionner avec une branche de collaboration (nommée généralement <inline>master</inline>).</paragraph><paragraph>Prenons la situation suivante :</paragraph><code langage="text"><![CDATA[---M1 master
   \
   B1---B2---B3 toto]]></code><paragraph>Dans ce cas de figure vous avez créé une branche <inline>toto</inline> sur la base d’une branche <inline>master</inline> qui est la branche de collaboration du projet (là où tout le monde déverse ses contributions).</paragraph><paragraph>Vous avez fini de travailler et vous allez fusionner votre branche avec <inline>master</inline>.</paragraph><paragraph>Or, d’autres utilisateurs ont fait avancé <inline>master</inline> et la situation sur le dépôt distant est en réalité :</paragraph><code langage="text"><![CDATA[---M1---M2---M3 origin/master  ]]></code><paragraph>Si vous fusionnez en l’état vous ne pourrez pas obtenir un <i>merge fast-forward</i> et vous aurez peut être même des conflits lors de la fusion.</paragraph><paragraph>Que vous fassiez un <i>rebase</i> ou non vous allez d’abord devoir récupérer les modifications du dépôt distant :</paragraph><code langage="bash" showLines="1"><![CDATA[git checkout master
git pull origin master]]></code><paragraph>Ceci fait votre historique local est désormais :</paragraph><code langage="text"><![CDATA[---M1---M2---M3 master
   \
   B1---B2---B3 toto]]></code><paragraph>Si vous choisissez de <i>rebase</i> vous allez obtenir ceci :</paragraph><code langage="text"><![CDATA[---M1---M2---M3 master
              \
              B1'---B2'---B3' toto]]></code><paragraph>Le commit parent de <inline>B1</inline> était <inline>M1</inline> avant le <i>rebase</i>, il sera <inline>M3</inline> après.</paragraph><paragraph>De ce fait, Git va rejouer chaque <i>commit</i> en respectant l’ordre de filiation, d’abord <inline>B1</inline>, puis <inline>B2</inline>, etc .</paragraph><paragraph>À chaque étape, si Git rencontre un conflit, il vous laissera la main pour le résoudre.</paragraph><paragraph><b>Important</b> : les <i>commits</i> après <i>rebase</i> sont identifiés avec un prime (<inline>&#39;</inline>), <inline>B1</inline> devient <inline>B1&#39;</inline>, <inline>B2</inline> devient <inline>B2&#39;</inline> etc.</paragraph><paragraph>En effet Git recrée de nouveaux commits même en l’absence d’un conflit, donc avec un <i>timestamp</i> différent, donc le SHA1 identifiant le <i>commit</i> est différent.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-effectuer-un-rebase"><question>Comment effectuer un <i>rebase</i> ?</question><author name="marco46"/><keywords>Git, rebase</keywords><answer><paragraph>Commencez par récupérer l’état de la branche parente sur le dépôt distant :</paragraph><code langage="bash" showLines="1"><![CDATA[git checkout master
git pull origin master]]></code><paragraph>Ensuite placez vous sur la branche à <i>rebase</i> et exécutez-le (la commande <inline>rebase</inline> prend en argument la branche servant de base, c’est à dire la branche parente) :</paragraph><code langage="bash" showLines="1"><![CDATA[git checkout toto
git rebase master]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="qu-est-ce-qu-un-rebase-interactif"><question>Qu’est-ce qu’un <i>rebase</i> intéractif ?</question><author name="marco46"/><keywords>Git, rebase</keywords><answer><paragraph>C’est un <i>rebase</i> étendu qui va vous permettre de définir quelle opération effectuer à chaque <i>commit</i> de votre branche subissant le <i>rebase</i>.</paragraph><paragraph>Les options à chaque étape sont les suivantes :</paragraph><liste><element><inline>pick</inline> pour utiliser le <i>commit</i> ;</element><element><inline>reword</inline> pour utiliser le <i>commit</i> et changer son message ;</element><element><inline>edit</inline> pour utiliser le <i>commit</i> mais pour pouvoir le modifier ;</element><element><inline>squash</inline> pour fusionner le <i>commit</i> avec le précédent ;</element><element><inline>fixup</inline> comme squash mais en supprimant le message de <i>commit</i> du <i>commit</i> fusionné ;</element><element><inline>exec</inline> pour exécuter une commande shell ;</element><element><inline>drop</inline> pour ignorer le <i>commit</i> qui n’existera donc plus dans votre historique au terme de l’opération.</element></liste></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="pourquoi-effectuer-un-rebase-interactif"><question>Pourquoi effectuer un <i>rebase</i> intéractif ?</question><author name="marco46"/><keywords>Git, rebase</keywords><answer><paragraph>Pour nettoyer son historique avant de le publier.</paragraph><paragraph>Fusionner les <i>commits</i> qui n’ont pas lieu d’exister indépendamment, nettoyer les messages de <i>commits</i>, supprimer des configurations temporaires, modifier leur ordre, etc.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-effectuer-un-rebase-interactif"><question>Comment effectuer un <i>rebase</i> intéractif ?</question><author name="marco46"/><keywords>Git, rebase</keywords><answer><paragraph>Il suffit d’ajouter le paramètre <inline>-i</inline> à la commande et d’y adjoindre la profondeur (combien de commits depuis la tête de la branche seront concernés).</paragraph><paragraph>Par exemple :</paragraph><code langage="bash" showLines="1"><![CDATA[git rebase -i HEAD~3]]></code><paragraph>Aura pour effet de <i>rebase</i> les trois derniers <i>commits</i> de votre branche.</paragraph><paragraph>L’exécution de cette commande entraine l’ouverture d’un éditeur de texte depuis votre shell, sous Windows avec Git BASH c’est <link href="https://www.vim.org/">VIM</link>, sur macOS c’est <link href="https://www.vim.org/">VIM</link> également et sur Ubuntu c’est <link href="https://www.nano-editor.org/">nano</link>.</paragraph><paragraph>L’éditeur de texte contient un fichier de configuration du <i>rebase</i> à effectuer, pour dire à chaque étape quelle opération vous souhaitez effectuer.</paragraph><paragraph>Par défaut on obtient <inline>pick</inline> pour chaque <i>commit</i>, par exemple :</paragraph><code langage="text"><![CDATA[pick d1fdf88 cypress - video recording on
pick b065479 travis and cypress - some fix in e2e tests + baseUrl conf + http-server devDeps + travis conf
pick 933cf95 migration from old webapp to jsonresume generated website

# Rebase 10f5b97..933cf95 onto 10f5b97 (3 command(s))
#
# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like "squash", but discard this commit's log message
# x, exec = run command (the rest of the line) using shell
# d, drop = remove commit
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
]]></code><paragraph>Il suffit de changer la commande à effectuer, d’enregistrer ce fichier et de quitter l’éditeur et Git démarrera l’opération de <i>rebase</i> intéractif.</paragraph><paragraph>Si par exemple je veux changer les messages de <i>commit</i> des trois commits de ma branche je vais configurer ainsi :</paragraph><code langage="text"><![CDATA[reword d1fdf88 cypress - video recording on
reword b065479 travis and cypress - some fix in e2e tests + baseUrl conf + http-server devDeps + travis conf
reword 933cf95 migration from old webapp to jsonresume generated website

# Rebase 10f5b97..933cf95 onto 10f5b97 (3 command(s))

...
]]></code><paragraph>Ceci fait, à chaque étape du <i>rebase</i> Git me proposera de saisir un nouveau message de <i>commit</i> via l’éditeur de texte du shell par défaut.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-annuler-un-rebase-en-cours"><question>Comment annuler un <i>rebase</i> en cours ?</question><author name="marco46"/><keywords>Git, rebase</keywords><answer><paragraph>Comme pour annuler une fusion :</paragraph><code langage="bash" showLines="1"><![CDATA[git rebase --abort]]></code><paragraph>Cette commande fonctionne pour le <i>rebase</i> standard comme pour le <i>rebase</i> intéractif.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-resoudre-un-conflit-lors-d-un-rebase"><question>Comment résoudre un conflit lors d’un <i>rebase</i> ?</question><author name="marco46"/><keywords>Git, rebase</keywords><answer><paragraph>Comme pour annuler une fusion.</paragraph><paragraph>Une fois les conflits traités et ajoutés à l’index il vous suffira de dire à Git de poursuivre le <i>rebase</i> (surtout pas de <i>commit</i> !)</paragraph><code langage="bash" showLines="1"><![CDATA[git rebase --continue]]></code><paragraph>Vous pouvez très bien obtenir des conflits à chaque étape, tout dépend des modifications effectuez par vous et les autres utilisateurs.</paragraph><paragraph>Cette commande fonctionne pour le <i>rebase</i> standard comme pour le <i>rebase</i> intéractif.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="qu-est-ce-qu-un-tag"><question>Qu’est-ce qu’un tag ?</question><author name="marco46"/><keywords>Git, tag</keywords><answer><paragraph>C’est un <i>label</i> (une chaîne de caractères) pointant sur un et un seul <i>commit</i>.</paragraph><paragraph>Son rôle est d’identifier un <i>commit</i>, c’est-à-dire une révision du code source, correspondant à une version précise du livrable obtenu depuis ce <i>commit</i>.</paragraph><paragraph>Le nommage d’un <i>tag</i> obéit généralement à une convention, la spécification <link href="https://semver.org/">semver</link> est de loin la plus utilisée.</paragraph><paragraph>Un tag peut être annoté pour donner des informations complémentaires en langage naturel.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-creer-une-tag"><question>Comment créer une tag ?</question><author name="marco46"/><keywords>Git, tag</keywords><answer><paragraph>En ligne de commande :</paragraph><code langage="bash" showLines="1"><![CDATA[git tag -a v1.4.0 -m 'my version 1.4.0']]></code><paragraph>A pour effet de créer un <i>tag</i> identifiant le <i>commit</i> actuellement <inline>checkout</inline>.</paragraph><paragraph>Ce <i>tag</i> est créé localement, pour l’ajouter à un dépôt distant il est nécessaire de le pousser :</paragraph><code langage="bash" showLines="1"><![CDATA[git push origin v1.4.0]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-supprimer-une-tag"><question>Comment supprimer une tag ?</question><author name="marco46"/><keywords>Git, tag</keywords><answer><code langage="bash" showLines="1"><![CDATA[git tag -d v1.4.0]]></code><paragraph>La suppression est seulement locale.</paragraph><paragraph>Supprimer un <i>tag</i> rendu public est une <b>très</b> mauvaise pratique. La bonne pratique est de créer un nouveau <i>tag</i> !</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-renommer-une-tag"><question>Comment renommer une tag ?</question><author name="marco46"/><keywords>Git, tag</keywords><answer><paragraph>Supprimez le <i>tag</i> et créez-en un nouveau.</paragraph><paragraph>Comme pour la suppression de <i>tag</i>, renommer un tag rendu public est une <b>très</b> mauvaise pratique.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-lister-les-tags-existants"><question>Comment lister les tags existants ?</question><author name="marco46"/><keywords>Git, tag</keywords><answer><code langage="bash" showLines="1"><![CDATA[git tag]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-comparer-deux-tags"><question>Comment comparer deux tags ?</question><author name="marco46"/><keywords>Git, tag</keywords><answer><paragraph>Exactement comme avec les branches, remplacez simplement les noms des branches par les noms des tags.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-comparer-l-etat-d-un-fichier-present-dans-deux-tags"><question>Comment comparer l’état d’un fichier présent dans deux tags ?</question><author name="marco46"/><keywords>Git, tag</keywords><answer><paragraph>Exactement comme avec les branches, remplacez simplement les noms des branches par les noms des <i>tags</i>.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="qu-est-ce-que-le-log"><question>Qu’est-ce que le log ?</question><author name="marco46"/><keywords>Git, log</keywords><answer><paragraph>Le log permet d’explorer l’historique des commits du dépôt.</paragraph><paragraph>Les options et possibilités sont très nombreuses, on peut filtrer l’affichage de beaucoup de manières, par références (branches, tags), par auteur de commit, par dates, etc …</paragraph><paragraph>On peut aussi comparer les références entre elles (branches, tags) afin d’afficher un CHANGELOG des commits entre différentes versions par exemple.</paragraph><paragraph>C’est un outil indispensable pour comprendre l’historique, il est également très utile pour la maintenance.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-afficher-le-log"><question>Comment afficher le log ?</question><author name="marco46"/><keywords>Git, log</keywords><answer><paragraph>Dans sa forme la plus simple :</paragraph><code langage="bash" showLines="1"><![CDATA[$ git log

commit df76163ff6c90e8c62c588a06d82fb3d3f3aca66
Author: Thomas Davis <thomasalwyndavis@gmail.com>
Date:   Wed Oct 10 21:37:16 2018 +1100

    Logs the correct path to jsonresume.json

commit 7ee2e20e767a979b0d0113133e045f3fe44a6735
Author: marlou <pro@marc-loupias.fr>
Date:   Thu Oct 4 10:51:51 2018 +0200

    update node version in engine section to drop unmaintained node version and match travis config

commit e9a998f5b02fd2e9a01def86a8ebb470c1d246d4
Author: marlou <pro@marc-loupias.fr>
Date:   Thu Oct 4 10:50:59 2018 +0200

    update superagent from 2.+ to 3.+

commit be7e49d14e11620f8a37b4d65f8790eeae188b38
Author: marlou <pro@marc-loupias.fr>
Date:   Thu Oct 4 10:21:06 2018 +0200

    moving to an up-to-date and actively maintained package to open the browser

    - open@0.0.5 removed
    - opn@5.4.0 sindresorhus package added
]]></code><paragraph>On navigue avec les flèches du clavier et on sort en appuyant sur la touche <inline>q</inline>.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-afficher-le-log-sous-forme-graphique-dans-la-console"><question>Comment afficher le log sous forme graphique dans la console ?</question><author name="marco46"/><keywords>Git, log</keywords><answer><code langage="bash" showLines="1"><![CDATA[git log --graph]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-afficher-le-log-sur-une-seule-ligne-pour-chaque-commit"><question>Comment afficher le log sur une seule ligne pour chaque commit ?</question><author name="marco46"/><keywords>Git, log</keywords><answer><code langage="bash" showLines="1"><![CDATA[git log --oneline]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-afficher-un-changelog-entre-deux-tags"><question>Comment afficher un changelog entre deux tags ?</question><author name="marco46"/><keywords>Git, log</keywords><answer><code langage="bash" showLines="1"><![CDATA[git log 0.11.0..0.12.0 --oneline]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-filtrer-le-log-sur-la-base-des-messages-de-commit"><question>Comment filtrer le log sur la base des messages de commit ?</question><author name="marco46"/><keywords>Git, log</keywords><answer><code langage="bash" showLines="1"><![CDATA[git log --grep 'regex']]></code><paragraph>Le contenu de <inline>&#39;regex&#39;</inline> doit être une regex POSIX valide.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-filtrer-le-log-sur-la-base-de-l-auteur-des-commits"><question>Comment filtrer le log sur la base de l’auteur des commits ?</question><author name="marco46"/><keywords>Git, log</keywords><answer><code langage="bash" showLines="1"><![CDATA[git log --author="robert"]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-afficher-la-liste-des-fichiers-modifies-pour-chaque-commit-du-log"><question>Comment afficher la liste des fichiers modifiés pour chaque commit du log ?</question><author name="marco46"/><keywords>Git, log</keywords><answer><code langage="bash" showLines="1"><![CDATA[git log --stat]]></code></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-trouver-qui-a-modifie-quelle-ligne-dans-un-fichier-donne-blame"><question>Comment trouver qui a modifié quelle ligne dans un fichier donné ? (<inline>blame</inline>)</question><author name="marco46"/><keywords>Git, log</keywords><answer><paragraph>La commande <inline>blame</inline> permet d’explorer l’historique à l’intérieur d’un fichier.</paragraph><code langage="bash" showLines="1"><![CDATA[$ git blame sha1_file.c
0fcfd160 (Linus Torvalds  2005-04-18 13:04:43 -0700    8)  */
0fcfd160 (Linus Torvalds  2005-04-18 13:04:43 -0700    9) #include "cache.h"
1f688557 (Junio C Hamano  2005-06-27 03:35:33 -0700   10) #include "delta.h"
a733cb60 (Linus Torvalds  2005-06-28 14:21:02 -0700   11) #include "pack.h"
8e440259 (Peter Eriksen   2006-04-02 14:44:09 +0200   12) #include "blob.h"
8e440259 (Peter Eriksen   2006-04-02 14:44:09 +0200   13) #include "commit.h"
8e440259 (Peter Eriksen   2006-04-02 14:44:09 +0200   14) #include "tag.h"
8e440259 (Peter Eriksen   2006-04-02 14:44:09 +0200   15) #include "tree.h"
f35a6d3b (Linus Torvalds  2007-04-09 21:20:29 -0700   16) #include "refs.h"
70f5d5d3 (Nicolas Pitre   2008-02-28 00:25:19 -0500   17) #include "pack-revindex.h"628522ec (Junio C Hamano              2007-12-29 02:05:47 -0800   18) #include "sha1-lookup.h"]]></code><paragraph>Chaque ligne du fichier est affichée, devant chaque ligne on a le SHA1 en version courte, le nom de l’auteur et le timestamp de création du commit.</paragraph><paragraph>On navigue comme avec les logs avec les flèches du clavier et on sort avec la touche <inline>q</inline>.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="github"><question>GitHub</question><author name="marco46"/><keywords>Git, outils</keywords><answer><paragraph>GitHub est la plus grosse plateforme mondiale d’hébergement web de dépôts Git.</paragraph><paragraph>L’entreprise <link href="https://www.developpez.com/actu/207383/C-est-officiel-Microsoft-debourse-7-5-milliards-pour-s-offrir-GitHub-le-geant-de-Redmond-se-montre-plus-genereux-que-ce-que-disaient-les-rumeurs/">a été rachetée en juin 2018 par Microsoft</link>.</paragraph><paragraph>GitHub s’utilise comme une solution SaaS hébergée dans le cloud. Il est possible d’héberger un serveur sur son réseau local mais cette solution est payante et relativement chère (plusieurs dizaines d’euros par utilisateur).</paragraph><paragraph>Par défaut tous les dépôts sont publics, il faut payer pour disposer de dépôts privés.</paragraph><paragraph>La solution propose un grand nombre de fonctionnalités, de manière non-exhaustive on trouve :</paragraph><liste><element>les <i>issues</i> qui peuvent être utilisées comme un bug tracker ou/et comme un planificateur de tâches.</element><element>les <i>milestones</i> qui permettent de relier les <i>issues</i> à une version en devenir.</element><element>les <i>releases</i> qui permettent d’associer des tags à un <i>CHANGELOG</i> (bon de livraison).</element></liste><paragraph>La solution s’intègre aussi avec une grande quantité de services externes, intégration continue, code coverage, etc …</paragraph><paragraph>Les tarifs de GitHub se trouvent <link href="https://github.com/pricing">à cette adresse</link>.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="gitlab"><question>GitLab</question><author name="marco46"/><keywords>Git, outils</keywords><answer><paragraph>GitLab est le concurrent direct de GitHub bien qu’il couvre une surface fonctionnelle plus importante mais moins flexible (intégration moins importante avec les autres fournisseurs de services).</paragraph><paragraph>En effet GitLab ne se limite pas à la gestion du code source, il inclut tout le cycle de vie du projet, de la gestion du dépôt jusqu’au déploiement.</paragraph><paragraph>GitLab propose un service SaaS similaire à celui de GitHub mais il est également possible de le déployer sur un réseau local gratuitement.</paragraph><paragraph>Les tarifs de GitLab se trouvent <link href="https://about.gitlab.com/pricing/">à cette adresse</link>. L’hébergement de dépôts privés est gratuit.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="qu-elle-est-la-difference-entre-une-pull-request-github-et-une-merge-request-gitlab"><question>Qu’elle est la différence entre une pull request (GitHub) et une merge request (GitLab) ?</question><author name="marco46"/><keywords>Git, outils</keywords><answer><paragraph>Conceptuellement il n’y a aucune différence, il s’agit simplement d’une question de point de vue pour nommer cette opération.</paragraph><paragraph>Sur une “pull request” on demande au mainteneur de tirer (<inline>pull</inline>) sa branche pour une relecture suivie d’une fusion (<inline>merge</inline>). La notion de fusion est implicite.</paragraph><paragraph>Sur une “merge request” on demande explicitement au mainteneur de gérer la demande de fusion.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="quels-sont-les-usages-a-respecter-habituellement-avant-de-proposer-une-contribution"><question>Quels sont les usages à respecter habituellement avant de proposer une contribution ?</question><author name="marco46"/><keywords>Git, contribuer, opensource</keywords><answer><paragraph>Le fichier <inline>README.md</inline> du dépôt doit être lu en intégralité et très attentivement. Par convention c’est le point d’entrée documentaire de tout projet.<br />Il est affiché par défaut par les outils web type GitHub / GitLab lorsqu’on accède au dépôt du projet.<br />Les premières instructions pour utiliser le projet (installation des dépendances, compilation, exécution, …) sont souvent rédigées dans ce fichier.<br />Ces informations sont généralement reprises sur le wiki du projet et sur le site de présentation si il en dispose.</paragraph><paragraph>Certains projets ont d’autres fichiers servant à rentrer plus dans le détail, souvent au format markdown, qu’il est utile de lire.<br />Parmi ces fichiers ont peut trouver :</paragraph><liste><element><inline>CONTRIBUTE.md</inline> ou <inline>CONTRIBUTING.md</inline>, certains projets proposent un fichier dédié aux informations liées aux contributions.</element><element><inline>LICENSE.md</inline>, important de savoir quelle sera la licence de votre contribution.</element><element><inline>ISSUE_TEMPLATE.md</inline>, un template pour la création d’issue. Il est de bon ton de le respecter !</element><element><inline>PULL_REQUEST_TEMPLATE.md</inline>, un template pour la création des Pull Request. De même il est de bon ton de le respecter !</element><element><inline>CODE_OF_CONDUCT.md</inline>, un code de conduite à tenir dans vos échanges avec les autres contributeurs. Il est parfois nécessaire de l’accepter en même temps que la première Pull Request.</element><element><inline>CODING_STYLE.md</inline>, décrit ou donne des liens décrivant le style de code à utiliser. Ce fichier est parfois associé à un linter qui sera exécuté dans l’intégration continue avec les tests.</element></liste></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-proposer-un-sujet-de-contribution"><question>Comment proposer un sujet de contribution ?</question><author name="marco46"/><keywords>Git, contribuer, opensource</keywords><answer><paragraph>Ouvrez une issue ! C’est le canal de discussion principal et c’est en quelque sorte la liste des tâches (le <i>backlog</i>) du projet.</paragraph><paragraph>Il vaut mieux proposer une contribution par ce biais avant de se lancer dans le code.<br />Inutile de perdre du temps à écrire du code si les mainteneurs du projet ne sont pas d’accord avec votre proposition.</paragraph><paragraph>Toutefois, s’il s’agit d’une modification mineure n’hésitez pas à proposer directement une Pull Request.</paragraph><paragraph>Certains projets utilisent beaucoup les outils communautaires type Discord, Slack, IRC. Il existe aussi <link href="https://gitter.im/">Gitter</link> qui bénéficie d’une excellente intégration avec GitHub.<br />C’est un excellent moyen de prendre la température d’autant que les historiques de discussion sont souvent publics.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="pourquoi-est-il-necessaire-de-forker-le-projet-sur-lequel-on-souhaite-contribuer"><question>Pourquoi est-il nécessaire de forker le projet sur lequel on souhaite contribuer ?</question><author name="marco46"/><keywords>Git, contribuer, opensource</keywords><answer><paragraph>Cela simplifie considérablement la gestion des droits du dépôt principal pour les mainteneurs du projet.<br />Avec un fork les contributeurs n’écrivent pas sur le dépôt principal, ils écrivent des commits sur leur fork et la Pull Request est un merge de ce fork vers le dépôt central.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="comment-initialiser-son-depot-local-pour-preparer-une-contribution"><question>Comment initialiser son dépôt local pour préparer une contribution ?</question><author name="marco46"/><keywords>Git, contribuer, opensource</keywords><answer><paragraph>Après avoir lu entièrement la documentation et forké le dépôt principal il faut cloner sur votre machine le dépôt central : <inline>git clone &lt;url-depot&gt;</inline>.<br />Ensuite il faut ajouter à votre dépôt local votre fork en tant que dépôt distant : <inline>git remote add &lt;alias&gt; &lt;chemin/url&gt;</inline>.</paragraph><paragraph>Si vous fonctionnez de cette manière l’alias du dépôt distant principal sera <inline>origin</inline> et votre fork aura le nom que vous lui donnerez.<br />Personnellement j’appelle mon fork tout simplement <inline>fork</inline>.</paragraph><paragraph>On peut tout à fait faire l’inverse, c’est à dire cloner votre fork et ajouter le dépôt distant de référence.<br />C’est une question de nommage qui n’affecte que votre dépôt local. Faites comme vous le souhaitez.</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="quelles-sont-les-etapes-habituelles-d-une-contribution-de-code"><question>Quelles sont les étapes habituelles d’une contribution de code ?</question><author name="marco46"/><keywords>Git, contribuer, opensource</keywords><answer><paragraph>Après avoir lu entièrement la documentation, forké le dépôt principal et initialisé votre dépôt local, vous pouvez commencer à écrire du code.</paragraph><paragraph>Attention, <b>on n’ajoute jamais de commit sur la branche de collaboration</b>. Si vous voyez une branche <inline>master</inline> ou parfois <inline>develop</inline>, n’écrivez pas dessus.<br />Vous devez créer une branche dédiée à vos modifications. Tout ceci est généralement documenté par le projet.</paragraph><paragraph>Si vous n’avez pas mis à jour votre dépôt local depuis quelques temps ou que le projet est très actif il faut commencer par récupérer les dernières mises à jour.</paragraph><paragraph>Si la branche de collaboration est <inline>master</inline>, assurez-vous d’être positionné sur <inline>master</inline> (<inline>git checkout master</inline>) puis récupérez l’état de cette branche via <inline>git pull origin master</inline>.</paragraph><paragraph>Créez ensuite votre branche de travail : <inline>git checkout -b &lt;nom-de-votre-branche</inline>.</paragraph><paragraph>A ce stade vous pouvez librement écrire vos commits.</paragraph><paragraph>Une fois terminé, il faut rebaser votre travail. En effet vous avez pu passer plusieurs jours ou semaines à préparer votre contribution, et donc d’autres personnes auront probablement fait avancer <inline>master</inline>.</paragraph><paragraph>Il convient donc de récupérer leur travail : <inline>git checkout master</inline> puis <inline>git pull origin master</inline>.</paragraph><paragraph>Ceci fait retournez sur votre branche de travail (<inline>git checkout &lt;nom-de-votre-branche&gt;</inline>) et rebasez là avec master : <inline>git rebase master</inline>.</paragraph><paragraph>On peut également rebaser directement sa branche de travail sans tirer master via <inline>git rebase origin/master</inline>.<br />Attention il sera nécessaire de mettre à jour votre représentation locale du dépôt distant au préalable via <inline>git fetch origin</inline>.</paragraph><paragraph>Si vous avez des conflits fixez les, puis vous pouvez pousser votre branche sur votre fork : <inline>git push fork &lt;nom-de-votre-branche&gt;</inline>.</paragraph><paragraph>A ce stade, l’outil que vous utilisez pour collaborer vous proposera de créer une Pull Request (si GitHub) ou une Merge Request (si GitLab).</paragraph><paragraph>Une fois créée, c’est aux mainteneurs de travailler.<br />Selon comment ils fonctionnent et ont configuré leur projet, le fait d’avoir proposé une contribution a pu déclencher un job dans l’intégration continue.<br />Il convient de vérifier son résultat car si il est en erreur c’est à vous qu’il revient d’effectuer la correction, la Pull Request restera bloquée tant que la correction n’aura pas été effectuée.</paragraph><paragraph>Si tout va bien, les mainteneurs vont effectuer une revue de code de votre contribution. Restez attentif ils pourront vous proposer ou exiger des améliorations.</paragraph><paragraph>Notez qu’il est rare qu’une contribution (surtout les premières) soit acceptée au premier essai, il ne faut pas s’en offusquer le propre des Pull Request est d’échanger sur la collaboration apportée.</paragraph><paragraph>Si tout va bien vos commits seront ajoutés à la branche de collaboration.</paragraph><paragraph>Notez également que les mainteneurs demandent parfois de <inline>squash</inline> vos commits en un seul, un rebase intéractif suivi d’un <inline>git push --force fork &lt;nom-de-votre-branche&gt;</inline> sera nécessaire.<br />Sinon depuis peu les mainteneurs peuvent <inline>squash</inline> les commits eux-mêmes via l’interface web (sur GitHub comme sur GitLab).</paragraph></answer></QA><QA create_date="2018-11-19" last_update="2019-03-08" name="qu-est-ce-que-cela-m-apporte-de-contribuer-a-un-projet-opensource"><question>Qu’est-ce que cela m’apporte de contribuer à un projet OpenSource ?</question><author name="marco46"/><keywords>Git, contribuer, opensource</keywords><answer><paragraph>Indépendamment de la fonctionnalité que vous ajoutez et de la contribution technique pure, cela améliorera sensiblement vos compétences sur Git.</paragraph><paragraph>Pouvoir montrer une contribution effectuée à un projet OpenSource c’est aussi mettre en avant :</paragraph><liste><element>votre autonomie et votre esprit d’initiative notamment dans l’optique d’un télétravail.</element><element>une capacité à s’adapter à un contexte de travail spécifique (les règles spécifiques du projet).</element><element>une capacité à travailler à l’international (principalement en anglais).</element></liste></answer></QA></QAs>
</document>
